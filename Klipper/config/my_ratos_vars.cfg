#######################
# RatOS override, this file is mainly for RatOS variables and macros that I needed to override to work with the toolchanger
#######################

[gcode_macro RatOS]
variable_relative_extrusion: False
variable_preheat_extruder: True
variable_calibrate_bed_mesh: True
variable_nozzle_priming: "primeline"
variable_start_print_park_z_height: 50
variable_macro_travel_speed: 300
variable_adaptive_mesh: True

# change parking to the front to not crash into the tool docks
variable_start_print_park_in: "front" #"back"
variable_end_print_park_in: "front" #"back"
variable_pause_print_park_in: "front" #"back"

# for new endstops
variable_safe_home_x: 200
variable_safe_home_y: "middle"

# klicky probe
variable_stowable_probe_position_preflight: [ 24, 250 ] #[ 30, 60 ]
variable_stowable_probe_position_side:      [ 24, 331 ] #[  13, 60 ]
variable_stowable_probe_position_dock:      [ 11, 331 ] #[   13, 6.5 ]
variable_stowable_probe_position_exit:      [ 11, 311 ] #[   60, 6.5 ]

variable_nozzle_prime_start_x: "min" # min, max or number
variable_nozzle_prime_start_y: "min" # min, max or number
variable_nozzle_prime_direction: "auto" # auto, forwards, backwards




[gcode_macro DEPLOY_PROBE]
description: Deploy a stowable probe
gcode:
    {% set RatOS = printer["gcode_macro RatOS"] %}
    {% set speed = 100 * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set z_homed = 'z' in printer.toolhead.homed_axes %}

    {% if RatOS.stowable_probe_batch_mode_enabled and RatOS.stowable_probe_state == "deployed" %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
    {% else %}
        RESPOND TYPE=command MSG="Deploying probe"

        ; ensure the probe is currently stowed; can't deploy what isn't stowed.
        ASSERT_PROBE_STOWED
        
        
        G90

        {% if z_homed %}
            G91
            ; set approach elevation to clear probe over bed on fixed gantry machine
            G0 Z{ z_hop } F{z_hop_speed}
            G90
        {% else %}
            SET_KINEMATIC_POSITION Z=100
            G91
            G0 Z{ z_hop } F{z_hop_speed}
            G90
        {% endif %}

        T0

        ; move the carraige to safe position to start probe pickup
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }

        ;  move to the side of the dock
        G0 X{ RatOS.stowable_probe_position_side[0] } Y{ RatOS.stowable_probe_position_side[1] } F{ speed }

        ;  move sideways over the dock to pick up probe
        G0 X{ RatOS.stowable_probe_position_dock[0] } Y{ RatOS.stowable_probe_position_dock[1] } F{ speed }

        ; move out of the dock in a straight line
        G0 X{ RatOS.stowable_probe_position_exit[0] } Y{ RatOS.stowable_probe_position_exit[1] } F{ speed }
        
        ; move the carraige to safe position
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }

        ; confirm deploy was successful
        ASSERT_PROBE_DEPLOYED
        

    {% endif %}



[ratos_homing]
axes: xyz
z_hop: 15
z_hop_speed: 15
gcode:
	{% set x_homed = 'x' in printer.toolhead.homed_axes %}
	{% set y_homed = 'y' in printer.toolhead.homed_axes %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printer.toolhead.axis_maximum.y / 2 %}
	{% endif %}
	{% set z_probe = printer["gcode_macro RatOS"].z_probe|lower %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set homing_x = printer["gcode_macro RatOS"].homing_x|lower %}
	{% set homing_y = printer["gcode_macro RatOS"].homing_y|lower %}
	{% set homing = printer["gcode_macro RatOS"].homing|lower %}
	{% set prev_stop_on_error = printer["gcode_macro RatOS"].stowable_probe_stop_on_error %}

	# Make stowable probe assertion failures cause an emergency stop
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE=True

	M400                        # Wait for moves to finish
	G90                         # Absolute positioning

	{% if params.Y is defined or params.X is not defined and params.Z is not defined %}
		RESPOND MSG="Homing Y"
		{% if homing_y == 'endstop' or homing == 'endstops' %}
			G28 Y
		{% elif homing_y == 'sensorless' or homing == 'sensorless' %}
			HOME_Y_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_y to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_y, homing)) }
		{% endif %}
		{% set y_homed = True %}
		# G0 Y{safe_home_y} F{speed} # edit for toolchanger
		M400 # Wait for moves to finish
	{% endif %}


	{% if params.X is defined or params.Y is not defined and params.Z is not defined %}
		RESPOND MSG="Homing X"
		{% if homing_x == 'endstop' or homing == 'endstops' %}
			G28 X
		{% elif homing_x == 'sensorless' or homing == 'sensorless' %}
			HOME_X_SENSORLESS
		{% else %}
			{ action_emergency_stop("expected RatOS variable_homing_x to be 'sensorless' 'endstop' or variable_homing to be 'sensorless' or 'endstops' but found {} and {}".format(homing_x, homing)) }
		{% endif %}
		{% set x_homed = True %}
		# G0 X{safe_home_x} F{speed} # edit for toolchanger
		M400 # Wait for moves to finish
	{% endif %}


	{% if params.Z is defined or params.Y is not defined and params.X is not defined %}
		RESPOND MSG="Homing Z"
		{% if x_homed == False or y_homed == False %}
			M118 X and Y must be homed before homing Z
			{ action_emergency_stop("X and Y must be homed before homing Z") }
		{% else %}
			{% if z_probe == "stowable" %}
				DEPLOY_PROBE
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
				STOW_PROBE
			{% else %}
				G0 X{safe_home_x} Y{safe_home_y} F{speed}
				G28 Z
				G0 Z{z_hop} F{z_hop_speed}
			{% endif %}
		{% endif %}
	{% endif %}
	
	# Reset stowable probe stop on error state
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=stowable_probe_stop_on_error VALUE={prev_stop_on_error}



#####
# START PRINT MACROS Modified for ToolChanger
# Call this from your slicer (custom g-code). 
#####

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
	CLEAR_PAUSE
	{% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
	G90
	{% endif %}
	SAVE_GCODE_STATE NAME=start_print_state
	# Metric values
	G21
	# Absolute positioning
	G90 
	# Set extruder to absolute mode
	M82
	_USER_START_PRINT_BEFORE_HOMING
	{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
	STOWABLE_PROBE_BEGIN_BATCH
	{% endif %}
	# Home if needed
	MAYBE_HOME
	{% if params.CHAMBER_TEMP is defined %}
	_START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp}
	_USER_START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp}
	{% endif %}
	M117 Heating bed...
	RESPOND MSG="Heating bed..."
	# Wait for bed to heat up
	M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) } #heat bed and wait for it to heat up
	# Run the user created "AFTER_HEATING_BED" macro
	_USER_START_PRINT_AFTER_HEATING_BED
	# Run the customizable "AFTER_HEATING_BED" macro.

    # Below is _START_PRINT_AFTER_HEATING_BED just changed to fit toolchanger
    {% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
    {% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
    {% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}
    M117 Pre-heating extruder...
    RESPOND MSG="Pre-heating extruder..."
    # Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
    # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    M568 P{params.FIRST_EXTRUDER} R{params.FIRST_EXTRUDER_IDLE_TEMP} S{params.EXTRUDER_TEMP} A1
    # M568 P[initial_extruder] R{filament_toolchange_temp[initial_extruder]} S{first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]} A1 # example from KTCC git
    # M104 S{min_temp}
    # M109 P{params.FIRST_EXTRUDER} # wait for extruder to heat up
    # TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
    {% endif %}
    M117 Adjusting Z tilt...
    RESPOND MSG="Adjusting Z tilt..."
    # Adjust bed tilt
    Z_TILT_ADJUST
    M117 Rehoming Z after Z tilt adjustment...
    RESPOND MSG="Rehoming Z after Z tilt adjustment..."
    # Home again as Z will have changed after tilt adjustment and bed heating.
    G28 Z

    
	# Run the user created "START_PRINT_BED_MESH" macro
	_USER_START_PRINT_BED_MESH
	# Run the customizable "BED_MESH" macro
	_START_PRINT_BED_MESH X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1}
	{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
	STOWABLE_PROBE_END_BATCH
	{% endif %}

    T{params.FIRST_EXTRUDER}	# Mount extruder first used (even if only one extruder used). Waits for temperature inside the script.
  
	
	# Run the users "PARK" macro
	_USER_START_PRINT_PARK
	# Run the customizable "PARK" macro
	_START_PRINT_PARK
    # Start heating extruder
	M117 Heating Extruder...
	RESPOND MSG="Heating Extruder..."
    M568 P{params.FIRST_EXTRUDER} A2
	# M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
    M109 P{params.FIRST_EXTRUDER} # wait for extruder to heat up
	# Run the user created "AFTER_HEATING_EXTRUDER" macro.
	_USER_START_PRINT_AFTER_HEATING_EXTRUDER
	# Run the customizable "AFTER_HEATING_EXTRUDER" macro.
	_START_PRINT_AFTER_HEATING_EXTRUDER
	M117 Printing...
	RESPOND MSG="Printing..."
	RESTORE_GCODE_STATE NAME=start_print_state
	# Set extrusion mode based on user configuration
	{% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
		M83
	{% else %}
		M82
	{% endif %}
	G92 E0


[gcode_macro STOW_PROBE]
description: Stow a stowable probe
gcode:
    {% set RatOS = printer["gcode_macro RatOS"] %}
    {% set speed = RatOS.macro_travel_speed * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set z_homed = 'z' in printer.toolhead.homed_axes %}

    {% if RatOS.stowable_probe_batch_mode_enabled %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: not stowing"
    {% else %}
        RESPOND TYPE=command MSG="Stowing probe"

        G90

        # {% if z_homed %}
        #     ; set approach elevation to clear probe over bed on fixed gantry machine
        #     G0 Z{ z_hop } F{z_hop_speed}
        # {% endif %}

        ; ensure the probe is currently deployed; can't stow what isn't deployed.
        ASSERT_PROBE_DEPLOYED

        ; move the carraige to safe position
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }

        ; move to the exit/re-entry staging position
        G0 X{ RatOS.stowable_probe_position_exit[0] } Y{ RatOS.stowable_probe_position_exit[1] } F{ speed }

        ; move into dock
        G0 X{ RatOS.stowable_probe_position_dock[0] } Y{ RatOS.stowable_probe_position_dock[1] } F{ speed }

        ; quick swipe off
        G0 X{ RatOS.stowable_probe_position_side[0] } Y{ RatOS.stowable_probe_position_side[1] } F{ speed }

        ; move the carraige to safe position
        G0 X{ RatOS.stowable_probe_position_preflight[0] } Y{ RatOS.stowable_probe_position_preflight[1] } F{ speed }

        ; confirm stowing was successful
        ASSERT_PROBE_STOWED
    {% endif %}

#############################################################################################################
### Replace M106 from KCTT
#############################################################################################################
[gcode_macro M106]
#rename_original: XM106
variable_fan_speed: 0
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}
  SET_AND_SAVE_FAN_SPEED{newparameters}

#############################################################################################################
### 
#############################################################################################################

[gcode_macro TOOL_LOOP]
  gcode:
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=bypass_toolhead_position VALUE=1
    
    G0 X200 Y200
    G0 X200 Y250
    {% for move in range(5) %}
        T0
        #KTCC_TOOL_DROPOFF_ALL
        T1
        # T2
        # T3
        # T4   
    {% endfor %}
    T0
    SET_GCODE_VARIABLE MACRO=STORE_TOOLHEAD_POSITION VARIABLE=bypass_toolhead_position VALUE=0
  