[include klipper_toolchanger/*.cfg]
# [include tools/*.cfg]
[include tools/tool_0.cfg]
[include tools/tool_1.cfg]
[include calibrate-offsets.cfg]
      
[include crash_detection.cfg]
[include dock_calibrate.cfg]
  
# [include status_led.cfg] # might cause issues
# [include filament_sensors.cfg]
[include tool_usage.cfg]
        

      
# Enables saving of variables between powerdown of machine. Must be configured before [toollock].
[save_variables]
filename:  ~/printer_data/config/variables.cfg



[toollock]
purge_on_toolchange = False          # Here we can disable all purging. When disabled it overrides all other purge options. Defaults to true. This can be turned off by a macro for automatic probing hot tools without probing them. For example when doing TAMV or ZTATP.
init_printer_to_last_tool = True   #Initialise as it was turned off, unlock tool if none was loaded or lock if one was loaded. Defaults to True
tool_lock_gcode:
  SAVE_GCODE_STATE NAME=tool_unlock_state                                         # Save gcode state
   G91 
   #XY_HIGH_TORQUE_START
   G1 X-12 F{printer.save_variables.variables['ktcc_dock_move_speed']|int} #X-14
   G1 X1.5 F{printer.save_variables.variables['ktcc_dock_move_speed']|int} #X2
   #XY_HIGH_TORQUE_STOP
   RESTORE_GCODE_STATE NAME=tool_unlock_state MOVE=0                               # Restore gcode state
  
tool_unlock_gcode:
  SAVE_GCODE_STATE NAME=tool_lock_state                                           # Save gcode state
   G91 
   G1 X10 F{printer.save_variables.variables['ktcc_dock_move_speed']|int} #X12
   #G1 X-1 F{printer.save_variables.variables['ktcc_dock_move_speed']|int}
  RESTORE_GCODE_STATE NAME=tool_lock_state MOVE=0                                 # Restore gcode state
  
# Used to group several tools with similar settings.
[toolgroup 0]
is_virtual: False            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}

dropoff_gcode:
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}
  
##### Selectable tool. Must be configured after [toolgroup n].
[tool 0]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder
fan: partfan_t0
zone: 0,0,0
park: 0,0,0
offset:0,0,0
meltzonelength: 0 #18                 # Defaults to 0
idle_to_standby_time: 30          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
idle_to_powerdown_time: 86400       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 0           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
shaper_freq_y: 37.8
shaper_freq_x: 74.8
shaper_type_y: mzv
shaper_type_x: mzv

[tool 1]
tool_group: 0                     # Must be used and configured before this tool
extruder: extruder1
fan: partfan_t1
zone: 0,0,0
park: 0,0,0
offset:0,0,0.5
meltzonelength: 0 #18                 # Defaults to 0
idle_to_standby_time: 30          # Time in seconds from being parked to setting temperature to standby the temperature above. Use 0.1 to change imediatley to standby temperature. Defaults to 30
idle_to_powerdown_time: 86400       # Time in seconds from being parked to setting temperature to 0. Use something like 86400 to wait 24h if you want to disable. Defaults to 600
lazy_home_when_parking: 0           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.
shaper_freq_y: 37.8
shaper_freq_x: 74.8
shaper_type_y: mzv
shaper_type_x: mzv

[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:

  TOOLCHANGE_Z_MOVE_START

  {%set myself = printer['tool '~params.T]%}
  {% set lock_x = printer.save_variables.variables['t'~params.T~'_lock_x'] %}
  {% set lock_y = printer.save_variables.variables['t'~params.T~'_lock_y'] %}

  {% if printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_pos_stored|int == 0 and printer["gcode_macro STORE_TOOLHEAD_POSITION"].bypass_toolhead_position|int == 0 %}
      STORE_TOOLHEAD_POSITION X={printer.toolhead.position.x} Y={printer.toolhead.position.y}
  {% endif %}



  M568 P{myself.name} A2                                               # Put tool heater in Active mode

  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S12000                                                           # Set high acceleration for toolchanging
  #SAVE_POSITION
  SAVE_GCODE_STATE NAME=TOOL_PICKUP                                    # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  G92 E0
  ##############  Move in to parking spot  ##############
  G0 X{lock_x|int} F{printer.save_variables.variables['ktcc_speed1']|int}                                # Fast Move near the pickup position for tool.
  G0 Y{lock_y|int-10} F{printer.save_variables.variables['ktcc_speed1']|int}                                           # Slow Move to the pickup position for tool.
  G0 Y{lock_y|int} F{printer.save_variables.variables['ktcc_speed3']|int}                                           # Slow Move to the pickup position for tool.
  ##############  Lock Tool  ##############
  #M400                                                                 # Wait for all moves to finish.


  ## Tool Picked - Change Display to the Tool Loaded
 #ENABLE_FILAMENT_SENSOR T={params.T}
  ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none"  %}              # If the tool has an extruder:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'false' and  printer[myself.extruder].target|int > 0 %}
      M118 - We wait for tool to reach temp
      M116 P{myself.name} S2                                                 # Wait for tool to reach target temperature.      
      M118 - We extrude 3mm
      TOOL_LOCK
      _PRIME_TOOL_IF_FIRST_USE T={params.T} FAN={myself.fan} FORCE=0
    {% else %}
      TOOL_LOCK
      M116 P{myself.name} S5 #experimental   
      {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' %}
         _PRIME_TOOL_IF_FIRST_USE T={params.T} FAN={myself.fan} FORCE=0
      {% endif %}
    {% endif %}
  {% endif %}                                                          # /

                                                        # Lock the tool.
 #TOOL_LOCK    

  ##############  Finnish up  ##############
  # Restore GCODE state. Was saved at thebegining of SUB_TOOL_PICKUP_START. Move fast to last location.
   RESTORE_GCODE_STATE NAME=TOOL_PICKUP

  ##############  Return to saved position  ##############
  #RESTORE_POSITION
  #TIMELAPSE_TAKE_FRAME


[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:

   {%set myself = printer['tool '~params.T]%}
   {% set lock_x = printer.save_variables.variables['t'~params.T~'_lock_x'] %}
   {% set lock_y = printer.save_variables.variables['t'~params.T~'_lock_y'] %}
   {%set global_offset_z =  printer["gcode_macro VARIABLES_LIST"].global_z_offset|float %}

   {% if 't0_x_offset' not in printer.save_variables.variables %}
      {%set offset_x =  0 %}
      {%set offset_y =  0 %}
      {%set offset_z = 0 %}
  {% else %}
      {%set offset_x =  printer.save_variables.variables['t'~params.T~'_x_offset']|float%}
      {%set offset_y =  printer.save_variables.variables['t'~params.T~'_y_offset']|float%}
      {% if params.T|int > 0 %}
        {%set offset_z =  printer.save_variables.variables['t0_z_offset']|float + printer.save_variables.variables['t'~params.T~'_z_offset']|float + global_offset_z|float %}
      {% else %}
        {%set offset_z =  printer.save_variables.variables['t'~params.T~'_z_offset']|float %}
      {% endif %}
  {% endif %}


  M118 T{params.T}
  M118 OFFSET X: {offset_x}
  M118 OFFSET Y: {offset_y}
  M118 OFFSET Z: {offset_z}



  ##############  Move out to zone  ##############
  #G0 Y{myself.zone[1]|int - 50} F{printer.save_variables.variables['ktcc_speed1']|int}
  G0 Y{lock_y|int - 120} F{printer.save_variables.variables['ktcc_speed1']|int}

  RESTORE_ACCELERATION

  SET_GCODE_OFFSET X={offset_x|float} Y={offset_y|float} Z={offset_z|float} MOVE=1  # Set X and Y offsets, 
  # ;SET_ACTIVE_TOOL_PROBE T={params.T} ; no setting active tool probe
  # ;SET_STATUS_LED_LOCK T={params.T} # from 2tool_basic_setup.md

  G92 E0

  #{% if printer["gcode_macro TOOL_USE_COUNT"]['t'~params.T~'_use_count'] > 0 %}
  ##Enable Specific Tool Filament Sensor  
  # ENABLE_FILAMENT_SENSOR T={params.T}

  #{% endif %}
  INCREMENT_TOOL_USE_COUNT T={params.T}

  #Move to the last position of toolhead before toolchange

  {% if printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_pos_stored|int == 1  and printer["gcode_macro STORE_TOOLHEAD_POSITION"].bypass_toolhead_position|int == 0 %}
     M118 Move to old toolhead position
     G1 X{printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_x} Y{printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_y} F{printer.save_variables.variables['ktcc_speed1']|int}
  {% endif %}
  CLEAR_TOOLHEAD_POSITION

  VERIFY_TOOLCHANGE_DURING_PRINT DURATION=30 FORCE=0 #Delayed GCode to Verify Successful toolchange during a print 

  TOOLCHANGE_Z_MOVE_END

[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:

  TOOLCHANGE_Z_MOVE_START

  {%set myself = printer['tool '~params.T]%}
  {% set unlock_x = printer.save_variables.variables['t'~params.T~'_unlock_x'] %}
  {% set unlock_y = printer.save_variables.variables['t'~params.T~'_unlock_y'] %}

  ##Turn Off All Filament Sensors
  # TURN_OFF_ALL_FILAMENT_SENSORS

  #############  Retract the filament as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M568 P{myself.name} A1                                        # Put tool heater in standby
    SET_STEPPER_ENABLE STEPPER={ myself.extruder|lower} ENABLE=0  # turn off E Motor
  {% endif %}

  {% if printer["gcode_macro STORE_TOOLHEAD_POSITION"].toolhead_pos_stored|int == 0  and printer["gcode_macro STORE_TOOLHEAD_POSITION"].bypass_toolhead_position|int == 0%}
      STORE_TOOLHEAD_POSITION X={printer.toolhead.position.x} Y={printer.toolhead.position.y}
  {% endif %}

  SAVE_ACCELERATION                                            # Save current acceleration value.
  M204 S12000                                                   # Set high acceleration for toolchanging

  {% if myself.name|int != printer.toollock.tool_current|int %}
   { action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}


 ##############  Move in to parking spot  ##############


  SET_GCODE_OFFSET X=0 Y=0 MOVE=1                                    # Set XY offset to 0 so we park the tool right.

  G0 X{unlock_x|int} Y{unlock_y|int-120} F{printer.save_variables.variables['ktcc_speed1']|int}               # Fast Move near the pickup position for tool.
  G0 Y{unlock_y|int} F{printer.save_variables.variables['ktcc_speed1']|int}                                         # Slow Move to the pickup position for tool.

  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_002                        # Save GCode state.
  G90                                                           # Absolute positions
  TOOL_UNLOCK                         # Unlock the tool

  G0 Y{unlock_y|int-10} F{printer.save_variables.variables['ktcc_speed2']|int}
  G0 Y{unlock_y|int-40} F{printer.save_variables.variables['ktcc_speed1']|int}

  #SET_GCODE_OFFSET Z=0 MOVE=1                                     # Set XY offset to 0 so we park the tool right. 

  ## Tool Dropped- Change Display to No Tool Loaded


[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine. Do not use!
gcode:
  {%set myself = printer['tool '~params.T]%}

  # SET_STATUS_LED_DOCK T={params.T}

  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_002 MOVE=0   # Restore Gcode state
  RESTORE_ACCELERATION                # Restore saved acceleration value.       


[gcode_macro _PRIME_TOOL_IF_FIRST_USE]
gcode:
  {% if printer["gcode_macro TOOL_USE_COUNT"]['t'~params.T~'_use_count'] == 0 or params.FORCE|int ==1 %}
    G91
    G92 E0
    SET_FAN_SPEED FAN={params.FAN} SPEED=1
    G1 E15 F400
    #G4 P4000
    SET_FAN_SPEED FAN={params.FAN} SPEED=0
    G92 E0
    #G1 E5 F300
    G90
  {% endif %}

[gcode_macro PREPARE_TOOL_BEFORE_RESUME]
gcode:
  {% set tool = printer["gcode_macro VARIABLES_LIST"].active_tool %}
  {% set bed_temp = printer["gcode_macro VARIABLES_LIST"].current_bed_temp %}
  {% set unlock_x = printer.save_variables.variables['t'~tool~'_unlock_x'] %}
  {% set unlock_y = printer.save_variables.variables['t'~tool~'_unlock_y'] %}

  M118 "Heating Bed to {bed_temp}"
  ; Heat the bed first
  M140 S{bed_temp}
  M190 Sbed_temp} ; wait for bed temp

  ; Wait for bed to reach temperature with 2 degrees tolerance
  M116 H0 S2 ; Wait for bed to reach temperature with 2 degrees tolerance

  M118 "Heating Hotend to temperature"
  M568 P{tool} A2


  G28 Y
  G28 X

  #Heat up the toolhead to temp if its not heated

  {% if tool == 0 %}
    {% set extruder_name="extruder" %}
  {% else %}
    {% set extruder_name="extruder"~tool %}
  {% endif %}
  #SET_GCODE_OFFSET X=0 Y=0 MOVE=1                                    # Set XY offset to 0 so we park the tool right.
  G90
  #Move to Nozzle Priming Location 
  G0 X{unlock_x|int} Y{unlock_y|int-120} F{printer.save_variables.variables['ktcc_speed1']|int}               # Fast Move near the pickup position for tool.
  G0 Y{unlock_y|int} F{printer.save_variables.variables['ktcc_speed1']|int}                                         # Slow Move to the pickup position for tool.

  M116 P{tool} S2
  #Prime Nozzle Again
  {% if printer[extruder_name].can_extrude|default("false")|lower == 'false' %}
    _PRIME_TOOL_IF_FIRST_USE T={tool} FAN=partfan_t{tool} FORCE=1
  {% endif %}

    # ;SET_STATUS_LED_LOCK T={tool} # from 2tool_basic_setup.md
  #Move Out to the main build area 
  G0 Y{unlock_y|int-120} F{printer.save_variables.variables['ktcc_speed1']|int}
  G91





  
